{"version":3,"sources":["logo.svg","components/AddNewProject.js","components/ProjectIndex.js","components/SingleProject.js","services/UserService.js","components/Signup.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AddNewProject","state","titleInput","descriptionInput","updateInput","e","_this","setState","Object","defineProperty","target","id","value","createANewProject","preventDefault","newTitle","newDescription","Axios","post","concat","process","theTitle","theDescription","withCredentials","then","responeFromOurAPI","console","log","props","letTheIndexComponentKnowThatWeAddedAProject","catch","err","react_default","a","createElement","onSubmit","this","onChange","Component","ProjectIndex","allTheProjects","fetchProjects","get","responseFromApi","data","reverse","showAllProjects","currentUser","filter","eachProject","owner","_id","map","key","title","description","Link","to","className","components_AddNewProject","SingleProject","descInput","editing","editProject","theActualProject","toggleForm","showProjectDetails","onClick","src","deleteProject","history","push","_this2","theID","match","params","theThingIGetBackFromApi","UserService","classCallCheck","signup","username","password","service","response","login","loggedin","logout","axios","create","baseURL","Signup","usernameInput","passwordInput","handleChange","name","handleFormSubmit","userFromDB","logTheUserIntoAppComponent","type","Login","userService","App","loggedInUser","logInTheUser","userToLogIn","showUser","fetchUser","theActualUserFromDB","_this3","Switch","Route","path","render","components_ProjectIndex","assign","component","components_Signup","components_Login","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yMCuEzBC,6MAhEXC,MAAM,CACFC,WAAY,GACZC,iBAAkB,MAGtBC,YAAc,SAACC,GACXC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAgBH,EAAEK,OAAOC,GAAKN,EAAEK,OAAOE,WAK3CC,kBAAoB,SAACR,GACjBA,EAAES,iBACF,IAAMC,EAAWT,EAAKL,MAAMC,WACtBc,EAAiBV,EAAKL,MAAME,iBAKlCc,IAAMC,KAAN,GAAAC,OAAcC,iDAAd,kBACC,CAACC,SAAUN,EAAUO,eAAgBN,GACrC,CAACO,iBAAiB,IACjBC,KAAK,SAACC,GACJC,QAAQC,IAAI,UAAWF,GAEvBnB,EAAKsB,MAAMC,gDAMbC,MAAM,SAACC,GACLL,QAAQC,IAAI,sBAAuBI,8EAMvC,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKvB,mBAEjBmB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAOtB,MAAOwB,KAAKnC,MAAMC,WAAYS,GAAG,aAAa0B,SAAUD,KAAKhC,cAEpE4B,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SAAOtB,MAAOwB,KAAKnC,MAAME,iBAAkBQ,GAAG,mBAAmB0B,SAAUD,KAAKhC,cAEhF4B,EAAAC,EAAAC,cAAA,+BAlDQI,aCsFbC,6MAnFXtC,MAAM,CACFuC,eAAgB,MAmBpBC,cAAgB,WACZxB,IAAMyB,IAAN,GAAAvB,OAAaC,iDAAb,WACCI,KAAK,SAACmB,GACHrC,EAAKC,SAAS,CAACiC,eAAgBG,EAAgBC,KAAKC,cAIvDf,MAAM,SAACC,SAOZe,gBAAkB,WACd,GAAGxC,EAAKL,MAAMuC,gBAAkBlC,EAAKsB,MAAMmB,YAOvC,OALmBzC,EAAKL,MAAMuC,eAAeQ,OAAO,SAACC,GACjD,OAAOA,EAAYC,QAAU5C,EAAKsB,MAAMmB,YAAYI,MAItCC,IAAI,SAACH,GACnB,OACIjB,EAAAC,EAAAC,cAAA,OAAKmB,IAAKJ,EAAYE,KACtBnB,EAAAC,EAAAC,cAAA,UAAKe,EAAYK,OACjBtB,EAAAC,EAAAC,cAAA,UAAKe,EAAYM,aACjBvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,GAAI,YAAaR,EAAYE,KAAnC,uGA/Bbf,KAAKK,iDA0CJ,OACIT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,2BAEAF,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,8BACdtB,KAAKU,mBAINd,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,+BACf1B,EAAAC,EAAAC,cAACyB,EAAD,CAAe9B,4CAA+CO,KAAKK,yBArEpDH,6BCwIZsB,6MA1IX3D,MAAM,CACFC,WAAY,GACZ2D,UAAW,GACXC,SAAS,KAuBb1D,YAAc,SAACC,GACXC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAEK,OAAOC,GAAKN,EAAEK,OAAOE,WAIhCmD,YAAc,SAAC1D,GACXA,EAAES,iBACFG,IAAMC,KAAK,GAAAC,OAAGC,iDAAH,gBAA+Cd,EAAKL,MAAM+D,iBAAiBb,IACtF,CAAC9B,SAAUf,EAAKL,MAAMC,WAAYoB,eAAgBhB,EAAKL,MAAM4D,YAC5DrC,KAAK,WACFlB,EAAKC,SAAS,CAACuD,SAAS,MAI3BhC,MAAM,iBAMXmC,WAAa,WACT3D,EAAKC,SAAS,CAACuD,SAAS,OAK5BI,mBAAqB,WAClB,GAAG5D,EAAKL,MAAM+D,iBAIT,OAAG1D,EAAKL,MAAM6D,QAIN9B,EAAAC,EAAAC,cAAA,QAAMC,SAAU7B,EAAKyD,aACrB/B,EAAAC,EAAAC,cAAA,SAAOwB,UAAU,QAAQ9C,MAAON,EAAKL,MAAMC,WAAYmC,SAAU/B,EAAKF,YAAaO,GAAG,eACtFqB,EAAAC,EAAAC,cAAA,SAAOwB,UAAU,QAAQ9C,MAAON,EAAKL,MAAM4D,UAAWxB,SAAU/B,EAAKF,YAAaO,GAAG,cACrFqB,EAAAC,EAAAC,cAAA,iCASJF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YACC5B,EAAKL,MAAMC,YAGZ8B,EAAAC,EAAAC,cAAA,YACK5B,EAAKL,MAAM4D,WAKhB7B,EAAAC,EAAAC,cAAA,OAAKiC,QAAS7D,EAAK2D,WAAYP,UAAU,UAAUU,IAAI,yKAQvEC,cAAgB,WACZpD,IAAMC,KAAK,GAAAC,OAAGC,iDAAH,kBAAiDd,EAAKL,MAAM+D,iBAAiBb,IAAK,IAC5F3B,KAAK,WAEFlB,EAAKsB,MAAM0C,QAAQC,KAAK,oBAG3BzC,MAAM,mGA3FS,IAAA0C,EAAApC,KACVqC,EAAQrC,KAAKR,MAAM8C,MAAMC,OAAOhE,GACtCM,IAAMyB,IAAI,GAAAvB,OAAGC,iDAAH,kBAAiDqD,GAC1DjD,KAAK,SAACoD,GAEHlD,QAAQC,IAAI,gDAAgDiD,GAE5DJ,EAAKjE,SAAS,CAACyD,iBAAkBY,EAAwBhC,KACrD1C,WAAY0E,EAAwBhC,KAAKU,MACzCO,UAAWe,EAAwBhC,KAAKW,gBAG7CzB,MAAM,+CA6FT,OAFAJ,QAAQC,IAAIS,KAAKR,OACjBF,QAAQC,IAAIS,KAAKnC,OAEb+B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCACCE,KAAK8B,qBAENlC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQiC,QAAS/B,KAAKiC,cAAeX,UAAU,UAA/C,gCA7HYpB,aCyCbuC,EAzCb,SAAAA,IAAc,IAAAvE,EAAA8B,KAAA5B,OAAAsE,EAAA,EAAAtE,CAAA4B,KAAAyC,GAAAzC,KAaZ2C,OAAS,SAACC,EAAUC,GAChB,OAAO3E,EAAK4E,QAAQhE,KAAK,UAAW,CAAC8D,WAAUC,aAC9CzD,KAAK,SAAA2D,GAAQ,OAAIA,EAASvC,QAfnBR,KAmBZgD,MAAQ,SAACJ,EAAUC,GACf,OAAO3E,EAAK4E,QAAQhE,KAAK,SAAU,CAAC8D,WAAUC,aAC7CzD,KAAK,SAAA2D,GAAQ,OAAIA,EAASvC,QArBnBR,KAyBZiD,SAAW,WACP,OAAO/E,EAAK4E,QAAQxC,IAAI,aACvBlB,KAAK,SAAA2D,GAAQ,OAAIA,EAASvC,QA3BnBR,KA+BZkD,OAAS,WACL,OAAOhF,EAAK4E,QAAQhE,KAAK,UAAW,IACnCM,KAAK,SAAA2D,GAAQ,OAAIA,EAASvC,QAhC/B,IAAIsC,EAAUK,IAAMC,OAAO,CACzBC,QAASrE,iDACTG,iBAAiB,IAInBa,KAAK8C,QAAUA,GCiDFQ,6MArDXzF,MAAQ,CAAE0F,cAAe,GAAIC,cAAe,MAC5CV,QAAU,IAAIL,IAGhBgB,aAAe,SAACxF,GACZC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAgBH,EAAEK,OAAOoF,KAAOzF,EAAEK,OAAOE,WAI7CmF,iBAAmB,SAAC1F,GAChBA,EAAES,iBAEFR,EAAK4E,QAAQH,OAAOzE,EAAKL,MAAM0F,cAAerF,EAAKL,MAAM2F,eACxDpE,KAAK,SAACwE,GACHtE,QAAQC,IAAI,2BAA4BqE,GACxC1F,EAAKsB,MAAMqE,2BAA2BD,GAGtC1F,EAAKC,SAAS,CAACoF,cAAe,GAAIC,cAAe,KAEjDtF,EAAKsB,MAAM0C,QAAQC,KAAK,oBAI3BzC,MAAM,SAACC,GACJL,QAAQC,IAAI,6BAA8BI,8EAM1C,IAAAyC,EAAApC,KACN,OACEJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAK2D,kBACjB/D,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAOgE,KAAK,OAAOJ,KAAK,gBAAgBlF,MAAOwB,KAAKnC,MAAM0F,cAAetD,SAAW,SAAAhC,GAAC,OAAImE,EAAKqB,aAAaxF,MAE3G2B,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAO4D,KAAK,gBAAgBlF,MAAOwB,KAAKnC,MAAM2F,cAAevD,SAAW,SAAAhC,GAAC,OAAImE,EAAKqB,aAAaxF,MAE/F2B,EAAAC,EAAAC,cAAA,SAAOgE,KAAK,SAAStF,MAAM,YAG/BoB,EAAAC,EAAAC,cAAA,0CA7CSI,aCwDJ6D,6MAvDXlG,MAAQ,CAAE0F,cAAe,GAAIC,cAAe,MAC5CQ,YAAc,IAAIvB,IAGpBgB,aAAe,SAACxF,GACZC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAgBH,EAAEK,OAAOoF,KAAOzF,EAAEK,OAAOE,WAI7CmF,iBAAmB,SAAC1F,GAChBA,EAAES,iBAEFR,EAAK8F,YAAYhB,MAAM9E,EAAKL,MAAM0F,cAAerF,EAAKL,MAAM2F,eAC3DpE,KAAK,SAACwE,GAEH1F,EAAKC,SAAS,CAACoF,cAAe,GAAIC,cAAe,KAGjDtF,EAAKsB,MAAMqE,2BAA2BD,GAKtC1F,EAAKsB,MAAM0C,QAAQC,KAAK,oBAM3BzC,MAAM,SAACC,GACJL,QAAQC,IAAI,6BAA8BI,8EAM1C,IAAAyC,EAAApC,KACN,OACEJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAK2D,kBACjB/D,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAOgE,KAAK,OAAOJ,KAAK,gBAAgBlF,MAAOwB,KAAKnC,MAAM0F,cAAetD,SAAW,SAAAhC,GAAC,OAAImE,EAAKqB,aAAaxF,MAE3G2B,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAO4D,KAAK,gBAAgBlF,MAAOwB,KAAKnC,MAAM2F,cAAevD,SAAW,SAAAhC,GAAC,OAAImE,EAAKqB,aAAaxF,MAE/F2B,EAAAC,EAAAC,cAAA,SAAOgE,KAAK,SAAStF,MAAM,mBA/CvB0B,aC2GL+D,6MArGbpG,MAAM,CACJqG,aAAc,QAEhBpB,QAAU,IAAIL,IA8BZ0B,aAAe,SAACC,GAEdlG,EAAKC,SAAS,CAAC+F,aAAcE,OAK/BC,SAAW,WACT,GAAGnG,EAAKL,MAAMqG,aACZ,OACEtE,EAAAC,EAAAC,cAAA,uBAAe5B,EAAKL,MAAMqG,aAAatB,aAM7CM,OAAS,WACPhF,EAAK4E,QAAQI,SAAS9D,KAAK,WACzBlB,EAAKC,SAAS,CAAC+F,aAAc,6FA5CjClE,KAAKsE,gDAMM,IAAAlC,EAAApC,KAEPA,KAAK8C,QAAQG,WACZ7D,KAAK,SAAAmF,GACJnC,EAAKjE,SAAS,CACZ+F,aAAeK,MAIlB7E,MAAO,SAAAC,GACNL,QAAQC,IAAI,qBACZ6C,EAAKjE,SAAS,CACZ+F,cAAe,uCAgChB,IAAAM,EAAAxE,KAGP,OADAV,QAAQC,IAAIS,KAAKnC,OAEf+B,EAAAC,EAAAC,cAAA,WACCE,KAAKqE,WACNzE,EAAAC,EAAAC,cAAA,6BAEAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,GAAG,kBAAT,kBACAzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,GAAG,WAAT,wBACAzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,GAAG,UAAT,WACAzB,EAAAC,EAAAC,cAAA,UAAQiC,QAAW/B,KAAKkD,QAAxB,WAQAtD,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,KACE7E,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAOC,KAAK,iBAAiBC,OAAQ,SAACpF,GAAD,OAAWI,EAAAC,EAAAC,cAAC+E,EAADzG,OAAA0G,OAAA,GAAkBtF,EAAlB,CAAyBmB,YAAa6D,EAAK3G,MAAMqG,mBAEjGtE,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAOC,KAAK,eAAeI,UAAavD,IAOxC5B,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAOC,KAAK,UAAUC,OAAU,SAACpF,GAAD,OAAUI,EAAAC,EAAAC,cAACkF,EAAD5G,OAAA0G,OAAA,GAAYtF,EAAZ,CAAmBqE,2BAA8BW,EAAKL,mBAChGvE,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAOC,KAAK,SAASC,OAAU,SAACpF,GAAD,OAAUI,EAAAC,EAAAC,cAACmF,EAAD7G,OAAA0G,OAAA,GAAWtF,EAAX,CAAkBqE,2BAA8BW,EAAKL,4BA1FtFjE,aCCEgF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/C,MACvB,uECXNgD,IAASV,OACLhF,EAAAC,EAAAC,cAACyF,EAAA,EAAD,KACI3F,EAAAC,EAAAC,cAAC0F,EAAD,OAGNC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzG,KAAK,SAAA0G,GACjCA,EAAaC","file":"static/js/main.3b75904f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport \"../App.css\";\nimport Axios from 'axios';\nimport {Link} from 'react-router-dom';\n\n\nclass AddNewProject extends Component {\n    state={\n        titleInput: '',\n        descriptionInput: ''\n    }\n\n    updateInput = (e) => {\n        this.setState({[e.target.id]: e.target.value })\n        // this.state[e.target.id] = e.target.value\n        // fancy way of saying this\n    }\n\n    createANewProject = (e) => {\n        e.preventDefault();\n        const newTitle = this.state.titleInput;\n        const newDescription = this.state.descriptionInput;\n        // grab the values from the DOM\n\n        // gotta send withCredentials: true as a header because\n        // the route we are posting to uses req.user which is by default protected by express\n        Axios.post(`${process.env.REACT_APP_API_URL}/tasks/add-new`,\n         {theTitle: newTitle, theDescription: newDescription},\n         {withCredentials: true})\n         .then((responeFromOurAPI)=>{\n            console.log('success', responeFromOurAPI)\n\n            this.props.letTheIndexComponentKnowThatWeAddedAProject();\n            // after we send the axios request, we call the function in the parent component\n            // to make that component go and get all the project again so now it should have the new project we just added\n\n\n         })\n         .catch((err)=>{\n            console.log('error creating task', err)\n         })\n    }\n\n\n    render(){\n        return(\n            <div>\n                <h2>Add New Project</h2>\n                <form onSubmit={this.createANewProject}>\n\n                    <label>Title</label>\n                    <input value={this.state.titleInput} id=\"titleInput\" onChange={this.updateInput} />\n\n                    <label>Description</label>\n                    <input value={this.state.descriptionInput} id=\"descriptionInput\" onChange={this.updateInput} />\n\n                    <button>Save</button>\n\n                </form>\n                \n            </div>\n        )\n    }\n\n\n\n\n\n}\n\n\nexport default AddNewProject;\n\n","import React, {Component} from 'react';\nimport \"../App.css\";\nimport Axios from 'axios';\nimport {Link} from 'react-router-dom';\n\nimport AddNewProject from './AddNewProject';\n\n\nclass ProjectIndex extends Component{\n    state={\n        allTheProjects: []\n    }\n\n    // keep in mind, the first time the render function runs, the state will look exactly like we set it up in the contstructor above\n    // so since we are doint this.state.alltheProject.map, equalling to an empty array in the beginning is a clever trick because\n    // this first time the component renders, the state will have an empty array and will loop through that empty array and show nothing\n    // you will not see this because it happens very quickly\n    // however, if we do start out be equalling our this.state.alltheProjects to an empty array,\n    // we will get an error because we are trying to do .map on null, but you are not allowed to do that\n\n// componentWillMount runs everytime the component is about to be rendered on the page\n// in this function, we will make an axios request to our api route\n// the response we ge back should be equal to an object with a .data key inside it, and that .data will be equal to all the tasks from our API\n\n    componentWillMount(){\n       this.fetchProjects()\n    }\n\n\n    fetchProjects = () =>{\n        Axios.get(`${process.env.REACT_APP_API_URL}/tasks`)\n        .then((responseFromApi)=>{\n            this.setState({allTheProjects: responseFromApi.data.reverse()}) \n            // .reverse is just so we see the newest tasks at the top of the page\n            // once we get all the tasks, we set the state so that the state will have all the tasks in there\n        })\n        .catch((err)=>{\n        })\n    }\n\n\n    // because componentWillMount will still allow the component to intialize before running, we can protect ourselves\n    // by putting an if statement before anytime we want to loop through something in our state\n    showAllProjects = () => {\n        if(this.state.allTheProjects && this.props.currentUser){\n\n            const myProjects = this.state.allTheProjects.filter((eachProject)=>{\n                return eachProject.owner === this.props.currentUser._id\n            })\n\n            // once we have all the tasks in the state, we can map through them as we normally do\n            return myProjects.map((eachProject)=>{\n                return(\n                    <div key={eachProject._id}>\n                    <h3>{eachProject.title}</h3>\n                    <h6>{eachProject.description}</h6>\n                    <Link to={'/project/'+ eachProject._id} >See Details</Link>\n                </div>\n            )\n        })\n        }\n    }\n\n\n\n    render(){\n      \n        return(\n            <div>\n            <h1>Project Index</h1>\n\n            <div className=\"list-of-projects-container\">\n            {this.showAllProjects()}\n            </div>\n\n\n            <div className=\"add-new-component-container\">\n            <AddNewProject letTheIndexComponentKnowThatWeAddedAProject = {this.fetchProjects} />\n            {/* we pass in this function so that after we add a new project in the addNewProject component */}\n            {/* that component will be able to tell this component to go check for new projects */}\n            </div>\n\n\n            </div>\n        )\n    }\n\n\n\n}\n\n\nexport default ProjectIndex;","import React, {Component} from 'react';\nimport \"../App.css\";\nimport Axios from 'axios';\n\n\nclass SingleProject extends Component{\n    state={\n        titleInput: '',\n        descInput: '',\n        editing: false\n        \n    }\n\n\n\n    componentWillMount(){\n        const theID = this.props.match.params.id;\n        Axios.get(`${process.env.REACT_APP_API_URL}/task/details/`+theID)\n        .then((theThingIGetBackFromApi)=>{\n\n            console.log('------___---__-_-_--_-_-__-_-_-_-_-___-_-----',theThingIGetBackFromApi)\n\n            this.setState({theActualProject: theThingIGetBackFromApi.data,\n                titleInput: theThingIGetBackFromApi.data.title,\n                descInput: theThingIGetBackFromApi.data.description\n            })\n\n        }).catch(()=>{\n\n        })\n    }\n\n    updateInput = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    editProject = (e) => {\n        e.preventDefault();\n        Axios.post(`${process.env.REACT_APP_API_URL}/tasks/edit/`+this.state.theActualProject._id, \n        {theTitle: this.state.titleInput, theDescription: this.state.descInput})\n        .then(()=>{\n            this.setState({editing: false});\n            // after we submit the form and the Axios request is complete, we set this.state.editing\n            // back to false so that the form dissappears and looks all fancy\n        })\n        .catch(()=>{\n\n        })\n    }\n\n\n    toggleForm = () =>{\n        this.setState({editing: true})\n\n    }\n\n\n    showProjectDetails = () =>{\n       if(this.state.theActualProject){\n\n\n\n            if(this.state.editing){\n                // if this.state.editing is set to true, we will show a form\n\n                return(\n                    <form onSubmit={this.editProject}>\n                    <input className=\"input\" value={this.state.titleInput} onChange={this.updateInput} id=\"titleInput\"/>\n                    <input className=\"input\" value={this.state.descInput} onChange={this.updateInput} id=\"descInput\"/>\n                    <button>submit changes</button>\n                </form>\n            )\n\n        }  else{\n            // by default this.state.editing is set to false so when we first load the page we will\n            // see this below, which is just the info but not form\n\n            return(\n                <div>\n                    <span>\n                    {this.state.titleInput}\n                    </span>\n\n                    <span>\n                        {this.state.descInput}\n                    </span>\n                    {/* we put this little image of a pen here, and add an on click function */}\n                    {/* the on click function changes this.state.editing to true */}\n                    {/*  therefore, when we change this.state.editing to true, we show a form instead of just the info */}\n                    <img onClick={this.toggleForm} className=\"pen-pic\" src=\"https://us.123rf.com/450wm/jemastock/jemastock1707/jemastock170717063/82921914-stock-vector-school-pen-write-supply-accessory-icon-vector-illustration.jpg?ver=6\"/>\n                </div>\n            )\n        }\n        }\n    }\n\n\n    deleteProject = () =>{\n        Axios.post(`${process.env.REACT_APP_API_URL}/tasks/delete/`+this.state.theActualProject._id, {})\n        .then(()=>{\n            \n            this.props.history.push('/project-index');\n            // this is how your redirect in react\n        })\n        .catch(()=>{\n\n        })\n    }\n\n\n\n\n\n\n\n    render(){\n        console.log(this.props)\n        console.log(this.state)\n        return(\n            <div>\n                <h1> Project Details Page</h1>\n                {this.showProjectDetails()}\n\n                <br />\n                <br />\n                <br />\n                <br />\n            <div>\n                <button onClick={this.deleteProject} className=\"delete\">Delete This Project</button>\n            </div>\n\n                </div>\n        )\n    }\n\n\n\n\n}\n\n\n\nexport default SingleProject;","import axios from 'axios';\n\n\nclass UserService {\n\n  constructor() {\n    let service = axios.create({\n      baseURL: process.env.REACT_APP_API_URL,\n      withCredentials: true\n    });\n\n\n    this.service = service;\n  }\n\n\n//   axios.create allows you to preconfigure the url (and headers) of axios requests\n// so that when we make an axios request with that object, we pass in a url, and that url gets added onto the end of the url we created the axios object with\n    signup = (username, password) => {\n        return this.service.post('/signup', {username, password})\n        .then(response => response.data)\n    }\n\n\n    login = (username, password) => {\n        return this.service.post('/login', {username, password})\n        .then(response => response.data)\n    }\n\n\n    loggedin = () =>{\n        return this.service.get('/loggedin')\n        .then(response => response.data)\n    }\n\n\n    logout = () =>{\n        return this.service.post('/logout', {})\n        .then(response => response.data)\n    }\n\n\n\n\n}\n\nexport default UserService;","import React, {Component} from 'react';\nimport \"../App.css\";\nimport Axios from 'axios';\nimport UserService from '../services/UserService';\nimport {Link} from 'react-router-dom'\n\n\nclass Signup extends Component {\n      state = { usernameInput: '', passwordInput: '' };\n      service = new UserService();\n    \n  \n    handleChange = (e) =>{\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n\n    handleFormSubmit = (e) =>{\n        e.preventDefault();\n        // you could just do axios.post('http://localhost:5000/api/signup, {username: this.state.userNameInput, password: this.state.passWordInput}, {withCredentials: true})\n        this.service.signup(this.state.usernameInput, this.state.passwordInput)\n        .then((userFromDB)=>{\n            console.log('------------------------', userFromDB)\n            this.props.logTheUserIntoAppComponent(userFromDB)\n            // here we wait for the API to give us the user object back after logging in\n            // then we pass that user object back to app component\n            this.setState({usernameInput: '', passwordInput: ''})\n\n            this.props.history.push('/project-index');\n\n\n        })\n        .catch((err)=>{\n            console.log('sorry something went wrong', err)\n\n        })\n\n    }\n  \n    render(){\n      return(\n        <div>\n            <form onSubmit={this.handleFormSubmit}>\n                <label>Username:</label>\n                <input type=\"text\" name=\"usernameInput\" value={this.state.usernameInput} onChange={ e => this.handleChange(e)}/>\n                \n                <label>Password:</label>\n                <input name=\"passwordInput\" value={this.state.passwordInput} onChange={ e => this.handleChange(e)} />\n                \n                <input type=\"submit\" value=\"Signup\" />\n            </form>\n\n            <p>Already have account? \n                {/* <Link to={\"/\"}> Login</Link> */}\n            </p>\n\n    </div>\n      )\n    }\n  }\n  \n  export default Signup;","import React, {Component} from 'react';\nimport \"../App.css\";\nimport Axios from 'axios';\nimport UserService from '../services/UserService';\nimport {Link} from 'react-router-dom'\n\n\nclass Login extends Component {\n      state = { usernameInput: '', passwordInput: '' };\n      userService = new UserService();\n    \n  \n    handleChange = (e) =>{\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n\n    handleFormSubmit = (e) =>{\n        e.preventDefault();\n        // you could just do axios.post('http://localhost:5000/api/signup, {username: this.state.userNameInput, password: this.state.passWordInput}, {withCredentials: true})\n        this.userService.login(this.state.usernameInput, this.state.passwordInput)\n        .then((userFromDB)=>{\n            // here we wait for the API to give us the user object back after logging in\n            this.setState({usernameInput: '', passwordInput: ''})\n            \n            // then we pass that user object back to app component\n            this.props.logTheUserIntoAppComponent(userFromDB)\n            // here, we are getting the user object from the DB\n            // and we're setting AppComponent.state.loggedinuser equal to it\n\n\n            this.props.history.push('/project-index');\n            // then we redirect\n            \n\n\n        })\n        .catch((err)=>{\n            console.log('sorry something went wrong', err)\n\n        })\n\n    }\n  \n    render(){\n      return(\n        <div>\n            <form onSubmit={this.handleFormSubmit}>\n                <label>Username:</label>\n                <input type=\"text\" name=\"usernameInput\" value={this.state.usernameInput} onChange={ e => this.handleChange(e)}/>\n                \n                <label>Password:</label>\n                <input name=\"passwordInput\" value={this.state.passwordInput} onChange={ e => this.handleChange(e)} />\n                \n                <input type=\"submit\" value=\"Login\" />\n            </form>\n\n\n    </div>\n      )\n    }\n  }\n  \n  export default Login;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ProjectIndex from './components/ProjectIndex';\nimport {Route, Switch, Link} from 'react-router-dom';\nimport SingleProject from './components/SingleProject';\nimport Signup from './components/Signup';\nimport UserService from './services/UserService';\nimport Login from './components/Login';\n\n\nclass App extends Component {\n\n  state={\n    loggedInUser: null\n  }\n  service = new UserService()\n\n\n  componentDidMount(){\n    this.fetchUser()\n  }\n\n \n\n\n    fetchUser(){\n      // if( this.state.loggedInUser === null ){\n        this.service.loggedin()\n        .then(theActualUserFromDB =>{\n          this.setState({\n            loggedInUser:  theActualUserFromDB\n          }) \n\n        })\n        .catch( err =>{\n          console.log('catch getting hit')\n          this.setState({\n            loggedInUser:  false\n          }) \n        })\n      // }\n    }\n\n\n\n    logInTheUser = (userToLogIn) => {\n     \n      this.setState({loggedInUser: userToLogIn})\n    }\n\n\n\n    showUser = () =>{\n      if(this.state.loggedInUser){\n        return(\n          <div>Welcome, {this.state.loggedInUser.username}</div>\n        )\n      }\n    }\n\n\n    logout = () =>{\n      this.service.logout().then(()=>{\n        this.setState({loggedInUser: null});\n      })\n    }\n\n\n\n  render() {\n    // {this.fetchUser()}\n    console.log(this.state)\n    return (\n      <div>\n      {this.showUser()}\n      <h1>Were Still Here</h1>\n\n      <nav> \n        <Link to=\"/project-index\"> View Projects</Link>\n        <Link to=\"/signup\"> Sign Up For Account</Link>\n        <Link to=\"/login\"> Login </Link>\n        <button onClick = {this.logout} >Logout</button>\n      </nav>\n\n\n{/* // if you need to pass props to a component you are rendering inside a route, you must use render instead of component={} */}\n{/* // furthermore, if you do this, you must pass in {...this.props} in order to have access to this.props.history and this.props.match.params */}\n\n\n        <Switch>\n          <Route path=\"/project-index\" render={(props) => <ProjectIndex {...props} currentUser={this.state.loggedInUser} /> } />\n                                                      {/* by passing this.state.loggedInUser, anytime the user in app component changes, itll change in this component too */}\n          <Route path=\"/project/:id\" component = {SingleProject} />\n          {/*                     |      */}\n          {/*                     -------------------------------------------------------------------------------------------         */}\n          {/*                                                                                                                |                 */}\n            {/*                                                                                                              |         */}\n          \n          {/* in the single project component, we will have access to whatever is in the url inside this.props.match.params.id */}\n          <Route path=\"/signup\" render = {(props)=> <Signup {...props} logTheUserIntoAppComponent = {this.logInTheUser} />  } />\n          <Route path=\"/login\" render = {(props)=> <Login {...props} logTheUserIntoAppComponent = {this.logInTheUser} />  } />\n        \n        \n        \n        </Switch>\n\n\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}